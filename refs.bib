@inproceedings{Bigham:2010,
	Annote = {This paper is about a question answering service for blind people that uses Mechanical Turk along with some AI techniques like speech recognition and computer vision.  To me, this work mostly made a case for the fact that there's a great need for cameras to assist blind people in taking photographs.  The usefulness of the app was severely limited by the poor photos that the blind people often took.  I was disappointed that the authors didn't try a more iterative model where the Turkers could look at the photo and provide cues to the blind person about how they could take a more useful one.  I was also surprised that the authors didn't try to verify the responses.  I understand that latency was a key concern, but surely providing incorrect/spammy answers back to the blind person is less desirable than providing an answer in which you have more confidence after some small delay?  In the AMP Lab, one of our goals is to develop "error bars on everything."  One way to balance the need for reliability with the need for real-time performance is to provide the answers as quickly as they come back but to also tag each answer with an error bar.  As more answers are received, you can adapt the answer and reduce the error bar, indicating that your confidence has increased.  I was a bit confused by the authors' explanation of how they maintained a worker pool -- it sounded like they were just keeping the workers busy answering questions to which they no longer needed an answer just to keep them around.  Surely there must be a better way to keep the workers engaged?  Maybe they could have a separate "low priority" service which costs less and whose tasks will only be given to workers when they are idle.  I was intrigued by their comments about how a pool of workers could be shared among many users of VizWiz.  As I believe that the crowd and the cloud have a lot of parallels, this reminds me of Heroku, which hosts Ruby on Rails apps on EC2.  Heroku minimizes their costs by multiplexing many users on the same pool of EC2 instances.  You could also imagine a scaling service for the VizWiz crowd that would adapt the size of the worker pool to the VizWiz demand.},
	Author = {Jeffrey P. Bigham and Chandrika Jayant and Hanjie Ji and Greg Little and Andrew Miller and Robert C. Miller and Robin Miller and Aubrey Tatarowicz and Brandyn White and Samuel White and Tom Yeh},
	Date-Added = {2011-02-07 11:28:54 -0800},
	Date-Modified = {2011-02-07 11:30:02 -0800},
	Organization = {UIST},
	Publisher = {ACM},
	Title = {VizWiz: Nearly Real-time Answers to Visual Questions},
	Year = {2010},
	Bdsk-File-1 = {YnBsaXN0MDDUAQIDBAUIJidUJHRvcFgkb2JqZWN0c1gkdmVyc2lvblkkYXJjaGl2ZXLRBgdUcm9vdIABqAkKFRYXGyIjVSRudWxs0wsMDQ4RFFpOUy5vYmplY3RzV05TLmtleXNWJGNsYXNzog8QgASABqISE4ACgAOAB1lhbGlhc0RhdGFccmVsYXRpdmVQYXRo0hgNGRpXTlMuZGF0YU8RAYwAAAAAAYwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMKlXvhIKwAAA0/2NAp2aXp3aXoucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdh4ByW4mPgAAAAAAAAAAAAEABAAACSAAAAAAAAAAAAAAAAAAAAAGUGFwZXJzABAACAAAwqXBaAAAABEACAAAyW6WvgAAAAEAFANP9jQBfU++ADlN9QA5TeQAAHAxAAIAPE1hY2ludG9zaCBIRDpVc2Vyczprc2F1ZXI6RGVza3RvcDpSZXNlYXJjaDpQYXBlcnM6dml6d2l6LnBkZgAOABYACgB2AGkAegB3AGkAegAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAL1VzZXJzL2tzYXVlci9EZXNrdG9wL1Jlc2VhcmNoL1BhcGVycy92aXp3aXoucGRmAAATAAEvAAAVAAIADf//AACABdIcHR4fWCRjbGFzc2VzWiRjbGFzc25hbWWjHyAhXU5TTXV0YWJsZURhdGFWTlNEYXRhWE5TT2JqZWN0XxAaUmVzZWFyY2gvUGFwZXJzL3Zpendpei5wZGbSHB0kJaIlIVxOU0RpY3Rpb25hcnkSAAGGoF8QD05TS2V5ZWRBcmNoaXZlcgAIABEAFgAfACgAMgA1ADoAPABFAEsAUgBdAGUAbABvAHEAcwB2AHgAegB8AIYAkwCYAKACMAIyAjcCQAJLAk8CXQJkAm0CigKPApICnwKkAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAArY=}}
